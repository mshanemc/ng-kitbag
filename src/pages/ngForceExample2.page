<apex:page showHeader="false" sidebar="false" standardStylesheets="true" applyHtmlTag="false" applyBodyTag="false" docType="html-5.0">

    <c:AngularScripts/>

    <html ng-app="appName" id="ng-app" xmlns:ng="http://angularjs.org">

    <head>
        
        <!-- <script src="//ajax.googleapis.com/ajax/libs/jquery/1.9.0/jquery.min.js"/>     -->    
        <meta name="viewport" content="width=device-width, initial-scale=1.0"/>

        <link href="//cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/3.2.0/css/bootstrap.min.css" rel="stylesheet" type="text/css"/>
        <title>ngForce Account and Contacts Example</title>

    </head>

    <body ng-controller="appCtrl">

        <div class="container-fluid" >
            <div class="row">

            	<div class="col-md-12 alert alert-info">
                    <p>This demo shows search, currency formatting, SOQL queries, and links to page views and standard Salesforce pages. </p>
                    <p>Select an Account that containts Opportunities to get started, or search. </p>
            	</div>

                <!-- there are 12 columns, so adjusting with col-md-xx -->
                <div class="col-md-2 well">
                    <label for="">
                    	Search Accounts:
                    </label>
                     <input ng-model="query"/>
                    <hr/>
                </div>

              
                
                <div class="col-md-5">
                    <h3>Select an Account to see its Opportunities</h3>

                    <table class="table table-striped">
                        <tr>
                            <th>Name (Updates Right Side)</th>
                            <th>ID (Go to Standard Page)</th>
                        </tr>
                        <tbody>
                            <tr ng-repeat="account in accounts | filter:query">
                                <td><a target="_blank" href="" ng-click="oppQuery(account.Id)">{{account.Name}}</a></td> 
                                <td><a target="_blank" href="/{{account.Id}}">{{account.Id}}</a></td> 
                            <!--    <td>{{account.Id}}</td> -->
                            </tr>
                        </tbody>
                    </table>
                    
                </div>
                 <div class="col-md-5">
                    <h3>Opportunities</h3>
                    <table class="table table-striped">
                        <tr>
                            <th>Name</th>
                            <th>Amount</th>
                        </tr>
                        <tbody>
                            <tr ng-repeat="opp in opps">
                                <td>{{opp.Name}}</td>
                                <td>{{opp.Amount | currency}}</td>
                            </tr>
                        </tbody>
                    </table>
                    
                </div>
            </div> <!-- row -->
        </div> <!-- container-fluid -->

        <!-- if you wanted to show opportunities below accounts, you could use this
        <div class="row">
                <div class="col-md-12">
                 <h3>Opportunities</h3>
                     <table class="table table-striped">
                        <tbody>
                            <tr ng-repeat="opp in opps">
                                <td>{{opp.Name}}</td>
                                <td>{{opp.Id}}</td>
                            </tr>
                        </tbody>
                    </table>
                </div>
        </div> 
        -->
      

    <script type="text/javascript">
    
        //here you can include the script, or move this to a VF component and then include the c: on the page.

        var myModule = angular.module('appName', ['ngForce', 'ui.bootstrap'] );

        function appCtrl($scope, vfr){

 
            vfr.query("SELECT Id, Site, Type, Industry, Name, AccountNumber FROM Account limit 50")
            .then(function(accounts){
                // we can manipulate the results of this first query, even assign scope variables with it
                $scope.accounts = accounts.records;
                // var accountIds = _.pluck(accounts.records, 'Id');
                // accountIds = _.map(accountIds, function(id){ return "'" + id + "'";}).join(", ");
                // I'm leaving this in as an example of chaining calls. You could pull all the contacts for these
                //     acccounts at load time if you ran this query and they would display before ever clicking on an account link
                              
                /* return vfr.query("SELECT Id, Name FROM Opportunity WHERE AccountId in (" + accountIds + ")");
                }).then(function(Opps){
                    $scope.opps = Opps.records;  
                */
            },
            // This last link in the chain is our error reporting link.
            // If / When any of the above promises is rejected, or fails to resolve
            // this method runs, and in our case logs the error.
            function(error){
                log(error);
            });


            $scope.oppQuery=function(accountid) {
                vfr.query("SELECT Id, Name, Amount FROM Opportunity WHERE AccountId = '"+ accountid + "'")
                .then(function(Opps){
                    $scope.opps = Opps.records;  
                })

            }
            


        };

    </script>
    
    <!-- include this section for the streaming API if desired -->

    <!-- <script src="//cdnjs.cloudflare.com/ajax/libs/jquery/2.1.1/jquery.min.js"/>
    <script src="{!URLFOR($Resource.LAB_StreamingAPIDemo, '/js/cometd.js')}"/>
    <script src="{!URLFOR($Resource.LAB_StreamingAPIDemo, '/js/jquery.cometd.js')}"/>
    <script src="{!URLFOR($Resource.LAB_StreamingAPIDemo, '/js/json2.js')}"/> -->


    <c:ngforce /> <!-- Include this to make sure the controller gets instantiated -->


    </body>
    </html>
    
    

</apex:page>